#!/usr/bin/env python3

import subprocess
import uuid
from pathlib import Path
from datetime import datetime


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


DATA_DIR = Path("/root/noku-data/")

STAGE_DIR = DATA_DIR/"stage"
APP_DIR = STAGE_DIR/"app"
ENV_DIR = STAGE_DIR/"env"

BUILDPACKS_DIR = DATA_DIR/"buildpacks-default"
CUSTOM_BUILDPACKS_DIR = STAGE_DIR/"buildpacks-custom"

CONTAINERS_DIR = DATA_DIR/"containers"
RUN_CONTAINER = CONTAINERS_DIR/"heroku-16"
BUILD_CONTAINER = CONTAINERS_DIR/"heroku-16-build"

SLUGS_DIR = DATA_DIR/"slugs"
CACHES_DIR = DATA_DIR/"cache"

SOURCE_DIR = Path.cwd()
APP_NAME = SOURCE_DIR.name

# read from command line flags in main()
VERBOSE = False

def run(cmd, **kwargs):
    if VERBOSE: print(bcolors.OKGREEN + f"> {cmd}" + bcolors.ENDC)
    if kwargs.get('silent') == False:
        err = None
    else:
        err = subprocess.DEVNULL
    return subprocess.run(cmd, check=True, shell=True, stderr=subprocess.DEVNULL, **kwargs)


def nspawn(args, **kwargs):
    return run("systemd-nspawn --register=no -q -U -E STACK=heroku-16 -E HOME=/app " + args, **kwargs)


class NoBuildpackFound(Exception):
    pass


def build_binds(bps):
    res = f"--bind {APP_DIR}:/app --bind {ENV_DIR}:/env"
    if bps is None:
        return res
    for bp in bps:
        res += f" --bind {bp}:/bp/{bp.name}"
    return res


def parse_and_clone_buildpack(bp):
    parts = bp.strip().rsplit('#', maxsplit=1)
    if len(parts) == 2:
        url, fragment = parts
    else:
        url = bp
        fragment = None
    id = str(uuid.uuid4())
    folder = CUSTOM_BUILDPACKS_DIR/id
    print(f"-----> cloning {url}")
    run(f"git clone {url} {folder}")
    if fragment is not None:
        run(f"git -C {folder} checkout {fragment}")
    run(f"touch {folder}/export")
    nspawn(f"-D {BUILD_CONTAINER} --bind {folder}:/bp /bin/chown -R nobody:nogroup /bp")
    return (folder, bp)


def buildpacks_from_file(f):
    bpstrings = f.read_text().split('\n')
    return [parse_and_clone_buildpack(s) for s in bpstrings if len(s) > 0]


def prepare_buildpacks():
    bpfile = APP_DIR/".buildpacks"
    if bpfile.exists():
        return buildpacks_from_file(bpfile)
    for bp in (BUILDPACKS_DIR).glob("*"):
        try:
            name = nspawn(f"-D {BUILD_CONTAINER} -u nobody {build_binds([bp])} /bp/{bp.name}/bin/detect /app", stdout=subprocess.PIPE).stdout
            folder = CUSTOM_BUILDPACKS_DIR/str(uuid.uuid4())
            run(f"cp -rpT {bp} {folder}")
            run(f"touch {folder}/export")
            nspawn(f"-D {BUILD_CONTAINER} --bind {folder}:/bp /bin/chown -R nobody:nogroup /bp")
            return [(folder, name.strip().decode("utf-8"))]
        except subprocess.CalledProcessError:
            continue
    raise NoBuildpackFound()


def build(args):
    run(f"rm -rf {STAGE_DIR}")
    run(f"mkdir {STAGE_DIR}")

    run(f"cp -r -T {SOURCE_DIR} {APP_DIR}")
    run(f"mkdir {ENV_DIR}")
    run(f"mkdir {CUSTOM_BUILDPACKS_DIR}")

    bps = prepare_buildpacks()
    if VERBOSE: print(bps)

    cache_dir = CACHES_DIR/APP_NAME
    run(f"mkdir -p {cache_dir}")

    nspawn(f"-D {BUILD_CONTAINER} {build_binds(None)} --bind {cache_dir}:/cache /bin/chown -R nobody:nogroup /app /cache /bp/export")

    for bp, name in bps:
        print("-----> running buildpack " + name)
        nspawn(f"-D {BUILD_CONTAINER} -u nobody {build_binds([b[0] for b in bps])} --bind {cache_dir}:/cache --chdir /bp/{bp.name} /bin/bash -ec 'source <(cat /bp/*/export); /bp/{bp.name}/bin/compile /app /cache /env'")

    slug_dir = SLUGS_DIR/APP_NAME
    run(f"mkdir -p {slug_dir}")

    filename = datetime.utcnow().replace(microsecond=0).isoformat().replace(':', '_') + '.tar.gz'
    slug = slug_dir/filename
    run(f"tar cf {slug} -C {STAGE_DIR} app")


def cmd_from_procfile(slug, proc):
    text = run(f"tar xf {slug} -O app/Procfile", stdout=subprocess.PIPE).stdout.decode()
    proc_strings = text.split('\n')
    found_commands = [p.split(':', maxsplit=1)[1] for p in proc_strings if p.startswith(f"{proc}:")]
    if len(found_commands) != 1:
        raise "proc not found or multiple definitions found"
    return found_commands[0].strip()


def run_proc(args):
    slug = sorted((SLUGS_DIR/APP_NAME).glob('*.tar.gz'))[-1]
    proc = args.proc
    print(f"running {proc}")
    command = cmd_from_procfile(slug, proc)
    # -M localhost so sudo can resolve the host name
    nspawn(f"""-D {RUN_CONTAINER} --ephemeral -E PORT={args.port} --bind-ro {slug}:/app.tar.gz -M localhost /bin/bash -ec '
            tar xf /app.tar.gz -C /
            touch /app/.profile.d/__placeholder_to_make_bash_happy.sh
            cd /app
            exec sudo -Eu nobody bash -c "source <(cat .profile.d/*.sh); exec {command}"
            '""", silent=False)


def bootstrap(args):
    for p in [BUILDPACKS_DIR, CONTAINERS_DIR, SLUGS_DIR]:
        run(f"mkdir -p {p}")

    stack_images = DATA_DIR/".heroku-stack-images"
    if not stack_images.exists():
        run(f"git clone https://github.com/heroku/stack-images.git {stack_images}")
    else:
        run(f"git -C {stack_images} pull")

    if not RUN_CONTAINER.exists():
        run(f"mkosi -d ubuntu -r xenial --repositories main,universe -t directory -o {RUN_CONTAINER}")
        nspawn(f"-D {RUN_CONTAINER} /usr/bin/apt-get -y remove makedev")
        nspawn(f"-D {RUN_CONTAINER} /usr/bin/apt-get -y install sudo")
        nspawn(f"-D {RUN_CONTAINER} /bin/systemctl enable systemd-networkd")
        nspawn(f"-D {RUN_CONTAINER} --bind {stack_images}/heroku-16/bin/heroku-16.sh:/bs.sh /bs.sh")

    if not BUILD_CONTAINER.exists():
        run(f"cp -a {RUN_CONTAINER} {BUILD_CONTAINER}")
        nspawn(f"-D {BUILD_CONTAINER} --bind {stack_images}/heroku-16-build/bin/heroku-16-build.sh:/bs.sh /bs.sh")

    default_bps = {
        '00_ruby': 'https://github.com/heroku/heroku-buildpack-ruby.git',
        '01_nodejs': 'https://github.com/heroku/heroku-buildpack-nodejs.git',
        '02_clojure': 'https://github.com/heroku/heroku-buildpack-clojure.git',
        '03_python': 'https://github.com/heroku/heroku-buildpack-python.git',
        '04_java': 'https://github.com/heroku/heroku-buildpack-java.git',
        '05_gradle': 'https://github.com/heroku/heroku-buildpack-gradle.git',
        '06_scala': 'https://github.com/heroku/heroku-buildpack-scala.git',
        '07_php': 'https://github.com/heroku/heroku-buildpack-php.git',
        '08_go': 'https://github.com/heroku/heroku-buildpack-go.git',
    }

    for name, url in default_bps.items():
        dir = BUILDPACKS_DIR/name
        if not dir.exists():
            run(f"git clone {url} {dir}")
        else:
            run(f"git -C {dir} pull")


def main():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument('-v', '--verbose', action='store_true', help='print more things')

    s = p.add_subparsers(dest='cmd')
    s.required = True

    build_c = s.add_parser('build', help='build the app in the current directory into a slug')
    build_c.set_defaults(func=build)

    run_c = s.add_parser('run', help='run one process from the slug belonging to the app in the current directory')
    run_c.add_argument('proc', help='the process type as defined in Procfile')
    run_c.add_argument('--port', type=int, default=8080)
    run_c.set_defaults(func=run_proc)

    bootstrap_c = s.add_parser('bootstrap', help='bootstrap noku by building the required containers')
    bootstrap_c.set_defaults(func=bootstrap)

    res = p.parse_args()

    VERBOSE = res.verbose

    res.func(res)


if __name__ == "__main__":
    main()
